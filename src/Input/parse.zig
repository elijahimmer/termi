pub fn charToInput(char: u8) Input {
    const chord = chord: {
        var chord = Input.Chord.init(1) catch unreachable;
        chord.set(1, char);
        break :chord chord;
    };

    if (char > std.math.maxInt(u7)) return .{ .code = .{ .unknown = undefined }, .chord = chord };

    return switch (char) {
        1...31 => .{ .modifier = .{ .ctrl = true }, .chord = chord, .code = .{ .text = .{ .key_code = char + 96 } } },
        '!', '"', '#', '$', '&', '(', ')', '*', '+', ':', '<', '>', '?', '@', 'A'...'Z', '{', '|', '}', '~' => .{ .modifier = .{ .shift = true }, .chord = chord, .code = .{ .text = .{ .key_code = char } } },
        ' ', '\'', ',', '-', '.', '/', '0'...'9', ';', '=', '`', 'a'...'z' => .{ .chord = chord, .code = .{ .text = .{ .key_code = char } } },

        else => ,
    };
}

//pub fn parseCsiToCode(in: )  {
//    const event: InputEvent = @enumFromInt(in.D orelse @intFromEnum(InputEvent.press));
//    const modifier: InputModifiers = @bitCast(@as(u8, @truncate((in.C orelse 1) - 1)));
//
//    return .{ .event = event, .modifier = modifier, .code = .{ .special = switch (in.mod) {
//        'u' => switch (in.A orelse return .{ .event = event, .modifier = modifier, .code = .{ .unknown = undefined } }) {
//            else => return .{ .modifier = modifier, .event = event, .code = .{ .unicode = .{
//                .code = in.A orelse 1,
//                .alternate = in.B,
//                .code_points = in.E,
//            } } },
//            2 => .insert,
//            27 => .escape,
//            13 => .enter,
//            9 => .tab,
//            127 => .backspace,
//            57358 => .caps_lock,
//            57359 => .scroll_lock,
//            57360 => .num_lock,
//            57361 => .print_screen,
//            57362 => .pause,
//            57363 => .menu,
//            57376 => .F13,
//            57377 => .F14,
//            57378 => .F15,
//            57379 => .F16,
//            57380 => .F17,
//            57381 => .F18,
//            57382 => .F19,
//            57383 => .F20,
//            57384 => .F21,
//            57385 => .F22,
//            57386 => .F23,
//            57387 => .F24,
//            57388 => .F25,
//            57389 => .F26,
//            57390 => .F27,
//            57391 => .F28,
//            57392 => .F29,
//            57393 => .F30,
//            57394 => .F31,
//            57395 => .F32,
//            57396 => .F33,
//            57397 => .F34,
//            57398 => .F35,
//            57399 => .kp_0,
//            57400 => .kp_1,
//            57401 => .kp_2,
//            57402 => .kp_3,
//            57403 => .kp_4,
//            57404 => .kp_5,
//            57405 => .kp_6,
//            57406 => .kp_7,
//            57407 => .kp_8,
//            57408 => .kp_9,
//            57409 => .kp_decimal,
//            57410 => .kp_divide,
//            57411 => .kp_multiply,
//            57412 => .kp_subtract,
//            57413 => .kp_add,
//            57414 => .kp_enter,
//            57415 => .kp_equal,
//            57416 => .kp_separator,
//            57417 => .kp_left,
//            57418 => .kp_right,
//            57419 => .kp_up,
//            57420 => .kp_down,
//            57421 => .kp_page_up,
//            57422 => .kp_page_down,
//            57423 => .kp_home,
//            57424 => .kp_end,
//            57425 => .kp_insert,
//            57426 => .kp_delete,
//            57427 => .kp_begin,
//            57428 => .media_play,
//            57429 => .media_pause,
//            57430 => .media_play_pause,
//            57431 => .media_reverse,
//            57432 => .media_stop,
//            57433 => .media_fast_forward,
//            57434 => .media_rewind,
//            57435 => .media_track_next,
//            57436 => .media_track_previous,
//            57437 => .media_record,
//            57438 => .lower_volume,
//            57439 => .raise_volume,
//            57440 => .mute_volume,
//            57441 => .left_shift,
//            57442 => .left_control,
//            57443 => .left_alt,
//            57444 => .left_super,
//            57445 => .left_hyper,
//            57446 => .left_meta,
//            57447 => .right_shift,
//            57448 => .right_control,
//            57449 => .right_alt,
//            57450 => .right_super,
//            57451 => .right_hyper,
//            57452 => .right_meta,
//            57453 => .iso_level3_shift,
//            57454 => .iso_level5_shift,
//        },
//        'A' => .up,
//        'B' => .down,
//        'C' => .right,
//        'D' => .left,
//        'H' => .home,
//        'F' => .end,
//        'P' => .F1,
//        'Q' => .F2,
//        'S' => .F4,
//        '~' => switch (in.A orelse return .{ .unknown = undefined }) {
//            3 => .delete,
//            5 => .page_up,
//            6 => .page_down,
//            7 => .home,
//            8 => .end,
//            11 => .F1,
//            12 => .F2,
//            13 => .F3,
//            14 => .F4,
//            15 => .F5,
//            17 => .F6,
//            18 => .F7,
//            19 => .F8,
//            20 => .F9,
//            21 => .F10,
//            23 => .F11,
//            24 => .F12,
//            else => return .{ .unknown = undefined },
//        },
//        else => return .{ .unknown = undefined },
//    } } };
//}

const Input = @import("../Input.zig");
const Code = Input.Code;
